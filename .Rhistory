for (j in (i+1):n) {
fd_i_vals <- eval.fd(fine_grid, fd_obj[[i]])
fd_j_vals <- eval.fd(fine_grid, fd_obj[[j]])
diff_squared <- (fd_i_vals - fd_j_vals)^2
integral <- sum(diff_squared) * delta
row_values[j] <- sqrt(integral)
}
return(row_values)
}
# Appliquer la fonction en parallèle
result_list <- parLapply(cl, 1:(n-1), compute_row)
# Fermer le cluster
stopCluster(cl)
# Remplir la matrice de résultats
for (i in 1:(n-1)) {
for (j in (i+1):n) {
D0_matrix[i, j] <- result_list[[i]][j]
D0_matrix[j, i] <- D0_matrix[i, j]  # Matrice symétrique
}
}
return(D0_matrix)
}
D0_m = calculate_D0_matrix_parallel(fd_obj, fine_grid)
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 1000)
D0_m = calculate_D0_matrix_parallel(fd_obj, fine_grid)
system.time(D0_matrix_par <- calculate_D0_matrix_parallel(fd_obj, fine_grid))
View(D0_matrix_par)
dim(D0_matrix_par)
D0_matrix <- D0_matrix_par
plot_ly(z = ~D0_matrix, type = "surface") %>%
layout(
scene = list(
xaxis = list(title = "Profil"),
yaxis = list(title = "Profil"),
zaxis = list(title = "Distance D0")
)
)
no_cores
no_cores <- detectCores() - 1
no_cores
system.time(D1_matrix_par <- calculate_D1_matrix_parallel(fd_obj, fine_grid))
library(tidyverse)
library(fda)
library(stats)
library(factoextra)
library(plotly)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles.R")
source("./utils/derive_fonctionnelle.R")
system.time(D1_matrix_par <- calculate_D1_matrix_parallel(fd_obj, fine_grid))
library(tidyverse)
library(fda)
library(stats)
library(factoextra)
library(plotly)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles.R")
source("./utils/derive_fonctionnelle.R")
system.time(D1_matrix_par <- calculate_D1_matrix_parallel(fd_obj, fine_grid))
D1_matrix <- D1_matrix_par
plot_ly(z = ~D1_matrix, type = "surface") %>%
layout(
scene = list(
xaxis = list(title = "Profil"),
yaxis = list(title = "Profil"),
zaxis = list(title = "Distance D1")
)
)
Dp_matrix <- calculate_Dp_matrix_parallel(fd_obj, fine_grid, omega)
hc <- hclust(as.dist(D0_matrix), method = "complete")
groups <- cutree(hc, k = 3)
# Visualiser le dendrogramme avec les groupes
fviz_dend(hc, k = 3,
cex = 0.6,
hang = -1,
rect = TRUE,
main = "Dendrogramme de la CAH")
print(groups)
group_colors <- c("red", "blue", 'green')
plot(fd_obj[[1]], col = group_colors[groups[1]], lty = 1,
main = "Courbes fonctionnelles par groupe",
ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = group_colors[groups[i]], lty = 1)
}
legend("topright", legend = paste("Groupe", 1:3), col = group_colors, lty = 1)
true_labels <- c(1, 1, 2, 2, 3, 3)  # Exemple d'étiquettes vraies
# Calculer l'Adjusted Rand Index (ARI)
ari_value <- adjustedRandIndex(groups, true_labels)
install.packages("mclust")
install.packages("MLmetrics")
install.packages("mclust")
library(cluster)
library(fpc)
install.packages(fpc)
silhouette_score <- silhouette(groups, as.dist(D0_matrix))
avg_silhouette_width <- mean(silhouette_score[, 3])
print(paste("Average Silhouette Width:", avg_silhouette_width))
silhouette_score
db_index <- davies_bouldin(as.dist(D0_matrix), groups)
install.packages("fpc")
library(fpc)
db_index <- davies_bouldin(as.dist(D0_matrix), groups)
db_index <- davies_bouldin(as.dist(D0_matrix), groups)
silhouette_score
avg_silhouette_width
db_index <- cluster.stats(as.dist(D0_matrix), groups)$db
print(paste("Davies-Bouldin Index:", db_index))
db_index
hc <- hclust(as.dist(D1_matrix), method = "complete")
groups <- cutree(hc, k = 3)
# Visualiser le dendrogramme avec les groupes
fviz_dend(hc, k = 3,
cex = 0.6,
hang = -1,
rect = TRUE,
main = "Dendrogramme de la CAH")
print(groups)
group_colors <- c("red", "blue", 'green')
plot(fd_obj[[1]], col = group_colors[groups[1]], lty = 1,
main = "Courbes fonctionnelles par groupe",
ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = group_colors[groups[i]], lty = 1)
}
legend("topright", legend = paste("Groupe", 1:3), col = group_colors, lty = 1)
silhouette_score <- silhouette(groups, as.dist(D0_matrix))
avg_silhouette_width <- mean(silhouette_score[, 3])
avg_silhouette_width
omega <- 0.5
Dp_matrix <- calculate_Dp_matrix_parallel(fd_obj, fine_grid, omega)
system.time(Dp_matrix <- calculate_Dp_matrix_parallel(fd_obj, fine_grid, omega))
library(tidyverse)
library(fda)
library(stats)
library(factoextra)
library(plotly)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles.R")
source("./utils/derive_fonctionnelle.R")
system.time(Dp_matrix <- calculate_Dp_matrix_givenD0D1(D0_matrix, D1_matrix, omega)))
calculate_Dp_matrix_givenD0D1 <- function(D0_matrix, D1_matrix, omega){
Dp_matrix <- sqrt((1-omega)*D0_matrix^2 + omega*D1_matrix^2)
return(Dp_matrix)
}
system.time(Dp_matrix <- calculate_Dp_matrix_givenD0D1(D0_matrix, D1_matrix, omega)))
system.time(Dp_matrix <- calculate_Dp_matrix_givenD0D1(D0_matrix, D1_matrix, omega))
plot_ly(z = ~Dp_matrix, type = "surface") %>%
layout(
scene = list(
xaxis = list(title = "Profil"),
yaxis = list(title = "Profil"),
zaxis = list(title = "Distance Dp")
)
)
hc <- hclust(as.dist(Dp_matrix), method = "complete")
groups <- cutree(hc, k = 3)
# Visualiser le dendrogramme avec les groupes
fviz_dend(hc, k = 3,
cex = 0.6,
hang = -1,
rect = TRUE,
main = "Dendrogramme de la CAH")
print(groups)
group_colors <- c("red", "blue", 'green')
plot(fd_obj[[1]], col = group_colors[groups[1]], lty = 1,
main = "Courbes fonctionnelles par groupe",
ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = group_colors[groups[i]], lty = 1)
}
legend("topright", legend = paste("Groupe", 1:3), col = group_colors, lty = 1)
silhouette_score <- silhouette(groups, as.dist(D0_matrix))
avg_silhouette_width <- mean(silhouette_score[, 3])
avg_silhouette_width
gc()
library(tidyverse)
library(fda)
library(stats)
library(factoextra)
library(plotly)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles.R")
source("./utils/derive_fonctionnelle.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data, extract_n_data = 1000)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
fd_obj <- readRDS("./data/fdata.rds")
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 1000)
D0_matrix <- calculate_D0_matrix_parallel(fd_obj, fine_grid)
system.time(D0_matrix <- calculate_D0_matrix_parallel(fd_obj, fine_grid))
system.time(D0_matrix <- calculate_D0_matrix_parallel(fd_obj, fine_grid))
library(tidyverse)
library(fda)
library(stats)
library(factoextra)
library(plotly)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles.R")
source("./utils/derive_fonctionnelle.R")
# ------------------------- Chargement des donnees  ----------------------------
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data, extract_n_data = 1000)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
library(tidyverse)
library(fda)
library(stats)
library(factoextra)
library(plotly)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles.R")
source("./utils/derive_fonctionnelle.R")
# ------------------------- Chargement des donnees  ----------------------------
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data, extract_n_data = 1000)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
# -------------------------------- Lissage  ------------------------------------
#definition des variables utiles pour le lissage
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
plot(fd_obj[[1]], col = 1, lty = 1, main = "Profils lissés (bloc 47)",
ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = i, lty = 1)
}
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 1000)
D0_matrix <- calculate_D0_matrix_parallel(fd_obj, fine_grid)
saveRDS(D0_matrix, file="./data/D0_matrix_n1000.rds")
plot_ly(z = ~D0_matrix, type = "surface") %>%
layout(
scene = list(
xaxis = list(title = "Profil"),
yaxis = list(title = "Profil"),
zaxis = list(title = "Distance D0")
)
)
D1_matrix <- calculate_D1_matrix_parallel(fd_obj, fine_grid)
saveRDS(D1_matrix, file="./data/D1_matrix_n1000.rds")
plot_ly(z = ~D1_matrix, type = "surface") %>%
layout(
scene = list(
xaxis = list(title = "Profil"),
yaxis = list(title = "Profil"),
zaxis = list(title = "Distance D1")
)
)
omega <- 0.5
Dp_matrix <- calculate_Dp_matrix_parallel(fd_obj, fine_grid, omega)
#saveRDS(Dp_matrix, file="./data/Dp_matrix_omega05_n1000.rds")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data, extract_n_data = 100)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
# -------------------------------- Lissage  ------------------------------------
#definition des variables utiles pour le lissage
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
D0_matrix <- calculate_D0_matrix_parallel(fd_obj, fine_grid)
plot_ly(z = ~D0_matrix, type = "surface") %>%
layout(
scene = list(
xaxis = list(title = "Profil"),
yaxis = list(title = "Profil"),
zaxis = list(title = "Distance D0")
)
)
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data, extract_n_data = 200)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
# -------------------------------- Lissage  ------------------------------------
#definition des variables utiles pour le lissage
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
D0_matrix <- calculate_D0_matrix_parallel(fd_obj, fine_grid)
#saveRDS(D0_matrix, file="./data/D0_matrix_n1000.rds")
#D0_matrix <- readRDS("./data/D0_matrix.rds")
plot_ly(z = ~D0_matrix, type = "surface") %>%
layout(
scene = list(
xaxis = list(title = "Profil"),
yaxis = list(title = "Profil"),
zaxis = list(title = "Distance D0")
)
)
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data, extract_n_data = 300)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
# -------------------------------- Lissage  ------------------------------------
#definition des variables utiles pour le lissage
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
# sauvegarde du lissage
D0_matrix <- calculate_D0_matrix_parallel(fd_obj, fine_grid)
#saveRDS(D0_matrix, file="./data/D0_matrix_n1000.rds")
#D0_matrix <- readRDS("./data/D0_matrix.rds")
plot_ly(z = ~D0_matrix, type = "surface") %>%
layout(
scene = list(
xaxis = list(title = "Profil"),
yaxis = list(title = "Profil"),
zaxis = list(title = "Distance D0")
)
)
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data)
duplicat <- data[duplicated(data), ]
duplicat <- data[, duplicated(data) ]
View(duplicat)
duplicat <- data[duplicated(data), ]
View(data)
View(data)
library(tidyverse)
library(fda)
library(stats)
library(factoextra)
library(plotly)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles.R")
source("./utils/derive_fonctionnelle.R")
# ------------------------- Chargement des donnees  ----------------------------
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data, extract_n_data = 300)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 1000)
D0_matrix <- calculate_D0_matrix(fd_obj, fine_grid)
system.time(D0_matrix <- calculate_D0_matrix_parallel(fd_obj, fine_grid))
system.time(D0_matrix <- calculate_D0_matrix(fd_obj, fine_grid))
Initialiser un vecteur pour stocker les coefficients de silhouette moyens
silhouette_scores <- numeric(9)
# Boucle sur les valeurs de k de 2 à 10
for (k in 2:10) {
# Appliquer k-means
km_result <- kmeans(D0_matrix, centers = k, nstart = 25)
# Calculer le coefficient de silhouette
silhouette_score <- silhouette(km_result$cluster, as.dist(D0_matrix))
avg_silhouette_width <- mean(silhouette_score[, 3])
# Stocker le coefficient de silhouette moyen
silhouette_scores[k - 1] <- avg_silhouette_width
}
# Tracer la courbe du coefficient de silhouette en fonction de k
plot(2:10, silhouette_scores, type = "b",
xlab = "Nombre de clusters (k)",
ylab = "Coefficient de silhouette moyen",
main = "Coefficient de silhouette en fonction de k")
km_result <- kmeans(D0_matrix, centers = 3, nstart = 25)
# Visualiser les groupes
plot(fd_obj[[1]], col = km_result$cluster, lty = 1,
main = "Courbes fonctionnelles par groupe",
ylab = "Célérité", xlab = "Profondeurs")
km_result <- kmeans(D0_matrix, centers = 3, nstart = 25)
# Visualiser les groupes
plot(fd_obj[[1]], col = km_result$cluster, lty = 1,
main = "Courbes fonctionnelles par groupe",
ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = km_result$cluster, lty = 1)
}
km_result <- kmeans(D0_matrix, centers = 3, nstart = 25)
# Visualiser les groupes
plot(fd_obj[[1]], col = km_result$cluster, lty = 1,
main = "Courbes fonctionnelles par groupe",
ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = km_result$cluster, lty = 1)
}
legend("topright", legend = paste("Groupe", 1:3), col = group_colors, lty = 1)
plot(fd_obj[[1]], col = km_result$cluster, lty = 1,
main = "Courbes fonctionnelles par groupe",
ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = km_result$cluster, lty = 1)
}
legend("topright", legend = paste("Groupe", 1:3), col = km_result$cluster, lty = 1)
# Appliquer k-means avec k = 3
km_result <- kmeans(D0_matrix, centers = 3, nstart = 25)
# Définir les couleurs pour chaque groupe
group_colors <- c("red", "blue", "green")
# Visualiser les groupes
plot(fd_obj[[1]], col = group_colors[km_result$cluster[1]], lty = 1,
main = "Courbes fonctionnelles par groupe",
ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = group_colors[km_result$cluster[i]], lty = 1)
}
# Ajouter une légende
legend("topright", legend = paste("Groupe", 1:3), col = group_colors, lty = 1)
km_result <- kmeans(D0_matrix, centers = 2, nstart = 25)
# Définir les couleurs pour chaque groupe
group_colors <- c("red", "blue")
# Visualiser les groupes
plot(fd_obj[[1]], col = group_colors[km_result$cluster[1]], lty = 1,
main = "Courbes fonctionnelles par groupe",
ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = group_colors[km_result$cluster[i]], lty = 1)
}
# Ajouter une légende
legend("topright", legend = paste("Groupe", 1:2), col = group_colors, lty = 1)
silhouette_scores <- numeric(9)
# Boucle sur les valeurs de k de 2 à 10
for (k in 2:10) {
# Appliquer k-means
km_result <- kmeans(D0_matrix, centers = k, nstart = 25)
# Calculer le coefficient de silhouette
silhouette_score <- silhouette(km_result$cluster, as.dist(D0_matrix))
avg_silhouette_width <- mean(silhouette_score[, 3])
# Stocker le coefficient de silhouette moyen
silhouette_scores[k - 1] <- avg_silhouette_width
}
# Tracer la courbe du coefficient de silhouette en fonction de k
plot(2:10, silhouette_scores, type = "b",
xlab = "Nombre de clusters (k)",
ylab = "Coefficient de silhouette moyen",
main = "Coefficient de silhouette en fonction de k")
# Appliquer k-means avec k = 3
km_result <- kmeans(D0_matrix, centers = 2, nstart = 25)
# Définir les couleurs pour chaque groupe
group_colors <- c("red", "blue")
# Visualiser les groupes
plot(fd_obj[[1]], col = group_colors[km_result$cluster[1]], lty = 1,
main = "Courbes fonctionnelles par groupe",
ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = group_colors[km_result$cluster[i]], lty = 1)
}
# Ajouter une légende
legend("topright", legend = paste("Groupe", 1:2), col = group_colors, lty = 1)
silhouette_score <- silhouette(groups, as.dist(D0_matrix))
silhouette_scores <- numeric(9)
# Boucle sur les valeurs de k de 2 à 10
for (k in 2:10) {
# Appliquer k-means
km_result <- kmeans(D1_matrix, centers = k, nstart = 25)
# Calculer le coefficient de silhouette
silhouette_score <- silhouette(km_result$cluster, as.dist(D0_matrix))
avg_silhouette_width <- mean(silhouette_score[, 3])
# Stocker le coefficient de silhouette moyen
silhouette_scores[k - 1] <- avg_silhouette_width
}
D1_matrix <- calculate_D1_matrix_parallel(fd_obj, fine_grid)
silhouette_scores <- numeric(9)
# Boucle sur les valeurs de k de 2 à 10
for (k in 2:10) {
# Appliquer k-means
km_result <- kmeans(D1_matrix, centers = k, nstart = 25)
# Calculer le coefficient de silhouette
silhouette_score <- silhouette(km_result$cluster, as.dist(D0_matrix))
avg_silhouette_width <- mean(silhouette_score[, 3])
# Stocker le coefficient de silhouette moyen
silhouette_scores[k - 1] <- avg_silhouette_width
}
# Tracer la courbe du coefficient de silhouette en fonction de k
plot(2:10, silhouette_scores, type = "b",
xlab = "Nombre de clusters (k)",
ylab = "Coefficient de silhouette moyen",
main = "Coefficient de silhouette en fonction de k")
# Appliquer k-means avec k = 3
km_result <- kmeans(D0_matrix, centers = 2, nstart = 25)
# Définir les couleurs pour chaque groupe
group_colors <- c("red", "blue")
# Visualiser les groupes
plot(fd_obj[[1]], col = group_colors[km_result$cluster[1]], lty = 1,
main = "Courbes fonctionnelles par groupe",
ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = group_colors[km_result$cluster[i]], lty = 1)
}
# Ajouter une légende
legend("topright", legend = paste("Groupe", 1:2), col = group_colors, lty = 1)
