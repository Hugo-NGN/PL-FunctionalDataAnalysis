# Orthogonaliser la base de Riesz
phiHilbert <- gm_orthoN(phiRiesz)
# Script to transform Riesz sub-space to Hilbert sub-space
library(matlib)
# --------------------------- ORTHOGONALISATION --------------------------------
gramSchmidt <- function(X) {
Q <- matrix(0, nrow = nrow(X), ncol = ncol(X))
for (i in 1:ncol(X)) {
q <- X[, i]
for (j in 1:(i-1)) {
q <- q - proj(Q[, j], X[, i])
}
Q[, i] <- q / norm(q, type = "2")
}
return(Q)
}
proj <- function(u, v) {
return((v %*% u) / (u %*% u) * u)
}
# ------------------------------ OPTIMISATION ----------------------------------
derivee_k = function(X, k){
derivee <- X
for (i in 1:k) {
derivee <- c(diff(derivee), NA)
}
return(derivee)
}
criterion <- function(Y, X, k, lambda, T) {
sum_squared_diff <- sum((Y - X)^2)
X_k_derivative <- derivee_k(X, k)
#X_k_derivative <- X_k_derivative[!is.na(X_k_derivative)]
# Calculer l'intégrale de la dérivée d'ordre k sur T
# Pour simplifier, nous utilisons une approximation par somme de Riemann: CHOIX DE LA SOMM DE RIEMANN A CONFIRMER !!
integral_X_k <- sum(X_k_derivative * diff(T))
# Calculer le critère complet
criterion_value <- sum_squared_diff + lambda * integral_X_k
return(criterion_value)
}
calcul_vecteur_penalite <- function(X, k, T) {
X_k_derivative <- derivee_k(X, k)
#X_k_derivative <- X_k_derivative[!is.na(X_k_derivative)]
# Initialise le vecteur de penalite
P <- numeric(length(T))
for (i in 1:length(T)) {
# Approximation de l'integrale par une somme de Riemann
P[i] <- sum(X_k_derivative[1:i] * diff(T[1:i]))
}
return(P)
}
approximation_theta <- function(Y, phiHilbert, lambda, P) {
Phi_t <- t(phiHilbert)
Phi_t_Phi <- Phi_t %*% phiHilbert
lambda_P_t_P <- lambda * (t(P) %*% P)
inverse_matrix <- solve(Phi_t_Phi + lambda_P_t_P)
Phi_t_y <- Phi_t %*% Y
theta_hat <- inverse_matrix %*% Phi_t_y
return(theta_hat)
}
# Charger la bibliothèque nécessaire
library(matlib)
# Définir les données d'entrée
X <- c(1, 2, 3, 4, 5)  # Exemple de vecteur X
Y <- c(2, 3, 5, 7, 11) # Exemple de vecteur Y (observations)
k <- 1                # Ordre de la dérivée
lambda <- 0.1         # Paramètre de régularisation
T <- seq(0, 1, length.out = length(X)) # Vecteur de temps ou d'indices
# Définir une base de Riesz (exemple simple)
phiRiesz <- matrix(c(1, 1, 1, 1, 1,
1, 2, 3, 4, 5,
1, 4, 9, 16, 25), ncol=3)
# Orthogonaliser la base de Riesz
phiHilbert <- gramSchmidt(phiRiesz)
# Script to transform Riesz sub-space to Hilbert sub-space
library(matlib)
# --------------------------- ORTHOGONALISATION --------------------------------
proj <- function(u, v) {
# Calculer la projection de v sur u
return((as.vector(v %*% u) / as.vector(u %*% u)) * u)
}
gramSchmidt <- function(X) {
Q <- matrix(0, nrow = nrow(X), ncol = ncol(X))
for (i in 1:ncol(X)) {
q <- X[, i]
for (j in 1:(i-1)) {
q <- q - proj(Q[, j], X[, i])
}
Q[, i] <- q / norm(q, type = "2")
}
return(Q)
}
# ------------------------------ OPTIMISATION ----------------------------------
derivee_k = function(X, k){
derivee <- X
for (i in 1:k) {
derivee <- c(diff(derivee), NA)
}
return(derivee)
}
criterion <- function(Y, X, k, lambda, T) {
sum_squared_diff <- sum((Y - X)^2)
X_k_derivative <- derivee_k(X, k)
#X_k_derivative <- X_k_derivative[!is.na(X_k_derivative)]
# Calculer l'intégrale de la dérivée d'ordre k sur T
# Pour simplifier, nous utilisons une approximation par somme de Riemann: CHOIX DE LA SOMM DE RIEMANN A CONFIRMER !!
integral_X_k <- sum(X_k_derivative * diff(T))
# Calculer le critère complet
criterion_value <- sum_squared_diff + lambda * integral_X_k
return(criterion_value)
}
calcul_vecteur_penalite <- function(X, k, T) {
X_k_derivative <- derivee_k(X, k)
#X_k_derivative <- X_k_derivative[!is.na(X_k_derivative)]
# Initialise le vecteur de penalite
P <- numeric(length(T))
for (i in 1:length(T)) {
# Approximation de l'integrale par une somme de Riemann
P[i] <- sum(X_k_derivative[1:i] * diff(T[1:i]))
}
return(P)
}
approximation_theta <- function(Y, phiHilbert, lambda, P) {
Phi_t <- t(phiHilbert)
Phi_t_Phi <- Phi_t %*% phiHilbert
lambda_P_t_P <- lambda * (t(P) %*% P)
inverse_matrix <- solve(Phi_t_Phi + lambda_P_t_P)
Phi_t_y <- Phi_t %*% Y
theta_hat <- inverse_matrix %*% Phi_t_y
return(theta_hat)
}
# Définir les données d'entrée
X <- c(1, 2, 3, 4, 5)  # Exemple de vecteur X
Y <- c(2, 3, 5, 7, 11) # Exemple de vecteur Y (observations)
k <- 1                # Ordre de la dérivée
lambda <- 0.1         # Paramètre de régularisation
T <- seq(0, 1, length.out = length(X)) # Vecteur de temps ou d'indices
# Définir une base de Riesz (exemple simple)
phiRiesz <- matrix(c(1, 1, 1, 1, 1,
1, 2, 3, 4, 5,
1, 4, 9, 16, 25), ncol=3)
# Orthogonaliser la base de Riesz
phiHilbert <- gramSchmidt(phiRiesz)
# Script to transform Riesz sub-space to Hilbert sub-space
library(matlib)
# --------------------------- ORTHOGONALISATION --------------------------------
proj <- function(u, v) {
# Calculer la projection de v sur u
projection <- (sum(v * u) / sum(u * u)) * u
return(projection)
}
gramSchmidt <- function(X) {
Q <- matrix(0, nrow = nrow(X), ncol = ncol(X))
for (i in 1:ncol(X)) {
q <- X[, i]
for (j in 1:(i-1)) {
q <- q - proj(Q[, j], X[, i])
}
Q[, i] <- q / sqrt(sum(q * q))
}
return(Q)
}
# ------------------------------ OPTIMISATION ----------------------------------
derivee_k = function(X, k){
derivee <- X
for (i in 1:k) {
derivee <- c(diff(derivee), NA)
}
return(derivee)
}
criterion <- function(Y, X, k, lambda, T) {
sum_squared_diff <- sum((Y - X)^2)
X_k_derivative <- derivee_k(X, k)
#X_k_derivative <- X_k_derivative[!is.na(X_k_derivative)]
# Calculer l'intégrale de la dérivée d'ordre k sur T
# Pour simplifier, nous utilisons une approximation par somme de Riemann: CHOIX DE LA SOMM DE RIEMANN A CONFIRMER !!
integral_X_k <- sum(X_k_derivative * diff(T))
# Calculer le critère complet
criterion_value <- sum_squared_diff + lambda * integral_X_k
return(criterion_value)
}
calcul_vecteur_penalite <- function(X, k, T) {
X_k_derivative <- derivee_k(X, k)
#X_k_derivative <- X_k_derivative[!is.na(X_k_derivative)]
# Initialise le vecteur de penalite
P <- numeric(length(T))
for (i in 1:length(T)) {
# Approximation de l'integrale par une somme de Riemann
P[i] <- sum(X_k_derivative[1:i] * diff(T[1:i]))
}
return(P)
}
approximation_theta <- function(Y, phiHilbert, lambda, P) {
Phi_t <- t(phiHilbert)
Phi_t_Phi <- Phi_t %*% phiHilbert
lambda_P_t_P <- lambda * (t(P) %*% P)
inverse_matrix <- solve(Phi_t_Phi + lambda_P_t_P)
Phi_t_y <- Phi_t %*% Y
theta_hat <- inverse_matrix %*% Phi_t_y
return(theta_hat)
}
# Définir les données d'entrée
X <- c(1, 2, 3, 4, 5)  # Exemple de vecteur X
Y <- c(2, 3, 5, 7, 11) # Exemple de vecteur Y (observations)
k <- 1                # Ordre de la dérivée
lambda <- 0.1         # Paramètre de régularisation
T <- seq(0, 1, length.out = length(X)) # Vecteur de temps ou d'indices
# Définir une base de Riesz (exemple simple)
phiRiesz <- matrix(c(1, 1, 1, 1, 1,
1, 2, 3, 4, 5,
1, 4, 9, 16, 25), ncol=3)
# Orthogonaliser la base de Riesz
phiHilbert <- gramSchmidt(phiRiesz)
# Script to transform Riesz sub-space to Hilbert sub-space
library(matlib)
# --------------------------- ORTHOGONALISATION --------------------------------
proj <- function(u, v) {
# Calculer la projection de v sur u
projection <- (sum(v * u) / sum(u * u)) * u
return(projection)
}
gramSchmidt <- function(X) {
Q <- matrix(0, nrow = nrow(X), ncol = ncol(X))
for (i in 1:ncol(X)) {
q <- X[, i]
for (j in 1:(i-1)) {
q <- q - proj(Q[, j], X[, i])
}
# Vérifier si q n'est pas un vecteur nul
if (sum(q * q) > 0) {
Q[, i] <- q / sqrt(sum(q * q))
} else {
stop("Le vecteur q est nul après orthogonalisation.")
}
}
return(Q)
}
# ------------------------------ OPTIMISATION ----------------------------------
derivee_k = function(X, k){
derivee <- X
for (i in 1:k) {
derivee <- c(diff(derivee), NA)
}
return(derivee)
}
criterion <- function(Y, X, k, lambda, T) {
sum_squared_diff <- sum((Y - X)^2)
X_k_derivative <- derivee_k(X, k)
#X_k_derivative <- X_k_derivative[!is.na(X_k_derivative)]
# Calculer l'intégrale de la dérivée d'ordre k sur T
# Pour simplifier, nous utilisons une approximation par somme de Riemann: CHOIX DE LA SOMM DE RIEMANN A CONFIRMER !!
integral_X_k <- sum(X_k_derivative * diff(T))
# Calculer le critère complet
criterion_value <- sum_squared_diff + lambda * integral_X_k
return(criterion_value)
}
calcul_vecteur_penalite <- function(X, k, T) {
X_k_derivative <- derivee_k(X, k)
#X_k_derivative <- X_k_derivative[!is.na(X_k_derivative)]
# Initialise le vecteur de penalite
P <- numeric(length(T))
for (i in 1:length(T)) {
# Approximation de l'integrale par une somme de Riemann
P[i] <- sum(X_k_derivative[1:i] * diff(T[1:i]))
}
return(P)
}
approximation_theta <- function(Y, phiHilbert, lambda, P) {
Phi_t <- t(phiHilbert)
Phi_t_Phi <- Phi_t %*% phiHilbert
lambda_P_t_P <- lambda * (t(P) %*% P)
inverse_matrix <- solve(Phi_t_Phi + lambda_P_t_P)
Phi_t_y <- Phi_t %*% Y
theta_hat <- inverse_matrix %*% Phi_t_y
return(theta_hat)
}
# Définir les données d'entrée
X <- c(1, 2, 3, 4, 5)  # Exemple de vecteur X
Y <- c(2, 3, 5, 7, 11) # Exemple de vecteur Y (observations)
k <- 1                # Ordre de la dérivée
lambda <- 0.1         # Paramètre de régularisation
T <- seq(0, 1, length.out = length(X)) # Vecteur de temps ou d'indices
# Définir une base de Riesz (exemple simple)
phiRiesz <- matrix(c(1, 1, 1, 1, 1,
1, 2, 3, 4, 5,
1, 4, 9, 16, 25), ncol=3)
# Orthogonaliser la base de Riesz
phiHilbert <- gramSchmidt(phiRiesz)
# Définir les données d'entrée
X <- c(1, 2, 3, 4, 5)  # Exemple de vecteur X
Y <- c(2, 3, 5, 7, 11) # Exemple de vecteur Y (observations)
k <- 1                # Ordre de la dérivée
lambda <- 0.1         # Paramètre de régularisation
T <- seq(0, 1, length.out = length(X)) # Vecteur de temps ou d'indices
# Définir une base de Riesz (exemple simple)
phiRiesz <- matrix(c(1, 0, 0, 0, 0,
0, 2, 2, 0, 0,
0, 0, 0, 1,2 ), ncol=3)
# Orthogonaliser la base de Riesz
phiHilbert <- gramSchmidt(phiRiesz)
# Définir les données d'entrée
X <- c(1, 2, 3, 4, 5)  # Exemple de vecteur X
Y <- c(2, 3, 5, 7, 11) # Exemple de vecteur Y (observations)
k <- 1                # Ordre de la dérivée
lambda <- 0.1         # Paramètre de régularisation
T <- seq(0, 1, length.out = length(X)) # Vecteur de temps ou d'indices
# Définir une base de Riesz (exemple simple)
phiRiesz <- matrix(c(1, 0, 0, 0, 0,
0, 2, 2, 0, 0,
0, 0, 0, 1,2 ), ncol=3)
# Orthogonaliser la base de Riesz
phiHilbert <- gramSchmidt(phiRiesz)
# Définir une base de Riesz modifiée (exemple simple)
phiRiesz <- matrix(c(1, 1, 1, 1, 1,
1, 0, -1, 0, 1,
1, 2, 1, -1, 1), ncol=3)
# Orthogonaliser la base de Riesz
phiHilbert <- gramSchmidt(phiRiesz)
# Script to transform Riesz sub-space to Hilbert sub-space
library(matlib)
# --------------------------- ORTHOGONALISATION --------------------------------
gm = function(PhiRiesz){
return(GramSchmidt(PhiRiesz))
}
# ------------------------------ OPTIMISATION ----------------------------------
derivee_k = function(X, k){
derivee <- X
for (i in 1:k) {
derivee <- c(diff(derivee), NA)
}
return(derivee)
}
criterion <- function(Y, X, k, lambda, T) {
sum_squared_diff <- sum((Y - X)^2)
X_k_derivative <- derivee_k(X, k)
#X_k_derivative <- X_k_derivative[!is.na(X_k_derivative)]
# Calculer l'intégrale de la dérivée d'ordre k sur T
# Pour simplifier, nous utilisons une approximation par somme de Riemann: CHOIX DE LA SOMM DE RIEMANN A CONFIRMER !!
integral_X_k <- sum(X_k_derivative * diff(T))
# Calculer le critère complet
criterion_value <- sum_squared_diff + lambda * integral_X_k
return(criterion_value)
}
calcul_vecteur_penalite <- function(X, k, T) {
X_k_derivative <- derivee_k(X, k)
#X_k_derivative <- X_k_derivative[!is.na(X_k_derivative)]
# Initialise le vecteur de penalite
P <- numeric(length(T))
for (i in 1:length(T)) {
# Approximation de l'integrale par une somme de Riemann
P[i] <- sum(X_k_derivative[1:i] * diff(T[1:i]))
}
return(P)
}
approximation_theta <- function(Y, phiHilbert, lambda, P) {
Phi_t <- t(phiHilbert)
Phi_t_Phi <- Phi_t %*% phiHilbert
lambda_P_t_P <- lambda * (t(P) %*% P)
inverse_matrix <- solve(Phi_t_Phi + lambda_P_t_P)
Phi_t_y <- Phi_t %*% Y
theta_hat <- inverse_matrix %*% Phi_t_y
return(theta_hat)
}
# Exemple de données
Y <- c(1, 2, 3, 4, 5)
PhiRiesz <- matrix(c(1, 2, 3, 4, 5, 2, 3, 4, 5, 6), ncol=2)
k <- 1
lambda <- 0.1
T <- seq(1, length(Y), 1)
# Orthogonalisation
phiHilbert <- gm(PhiRiesz)
# Calcul de la dérivée
X <- c(1, 2, 3, 4, 5)
X_k_derivative <- derivee_k(X, k)
# Calcul du critère
criterion_value <- criterion(Y, X, k, lambda, T)
# Calcul du vecteur de pénalité
P <- calcul_vecteur_penalite(X, k, T)
# Approximation de theta
theta_hat <- approximation_theta(Y, phiHilbert, lambda, P)
library(fda)
library(stats)
library(mclust)
library(plotly)
library(cluster)
library(tidyverse)
library(factoextra)
source("./utils/lissage.R")
matplot(t(data), type = "l", lty = 1, col = rainbow(1000))
library(fda)
library(stats)
library(mclust)
library(plotly)
library(cluster)
library(tidyverse)
library(factoextra)
source("./utils/lissage.R")
setwd("C:/Users/hugo.nguyen/Documents/M2 TRIED/Projet_Long/PL-FunctionalDataAnalysis")
library(fda)
library(stats)
library(mclust)
library(plotly)
library(cluster)
library(tidyverse)
library(factoextra)
source("./utils/lissage.R")
source("./utils/preprocess.R")
source("./utils/clustering.R")
source("./utils/derive_fonctionnelle.R")
source("./utils/distances_fonctionnelles.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data, extract_n_data = 1000)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
# -------------------------------- Lissage  ------------------------------------
#definition des variables utiles pour le lissage
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
matplot(t(data), type = "l", lty = 1, col = rainbow(1000))
# Ajouter des titres et des labels
title("Courbes des profils")
xlab("Observations")
ylab("Valeurs")
# Optionnel : Ajouter une légende
legend("topright", legend = rownames(data), col = rainbow(1000), lty = 1, cex = 0.5)
colnames(data)
x_values <- as.numeric(colnames(data))
# Tracer les courbes
matplot(x_values, t(data), type = "l", lty = 1, col = rainbow(1000), xaxt = "n")
# Ajouter des titres et des labels
title("Courbes des profils")
xlab("Observations")
ylab("Valeurs")
# Ajouter les valeurs correctes sur l'axe des x
axis(1, at = x_values, labels = colnames(data), las = 2)
# Optionnel : Ajouter une légende
legend("topright", legend = rownames(data), col = rainbow(1000), lty = 1, cex = 0.5)
x_values <- as.numeric(colnames(data))
# Tracer les courbes
matplot(x_values, t(data), type = "l", lty = 1, col = rainbow(1000), xaxt = "n")
# Ajouter des titres et des labels
title("Courbes des profils")
xlab("Observations")
ylab("Valeurs")
# Ajouter les valeurs correctes sur l'axe des x
axis(1, at = x_values, labels = colnames(data), las = 2)
x_values <- as.numeric(colnames(data))
# Tracer les courbes
matplot(x_values, t(data), type = "l", lty = 1, col = rainbow(1000), xaxt = "n")
# Ajouter des titres et des labels
title("Courbes des profils")
xlab("Profondeur")
ylab("Célérité")
# Ajouter les valeurs correctes sur l'axe des x
axis(1, at = x_values, labels = colnames(data), las = 2)
x_values <- as.numeric(colnames(data))
# Tracer les courbes
matplot(x_values, t(data), type = "l", lty = 1, col = rainbow(1000), xaxt = "n", ylab ="Célérité", xlab="Profondeur")
# Ajouter des titres et des labels
title("Courbes des profils")
# Ajouter les valeurs correctes sur l'axe des x
axis(1, at = x_values, labels = colnames(data), las = 2)
library(fda)
library(stats)
library(mclust)
library(plotly)
library(cluster)
library(tidyverse)
library(factoextra)
source("./utils/lissage.R")
source("./utils/preprocess.R")
source("./utils/clustering.R")
source("./utils/derive_fonctionnelle.R")
source("./utils/distances_fonctionnelles.R")
# ------------------------- Chargement des donnees  ----------------------------
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data, extract_n_data = 1000)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
# Ajouter les valeurs correctes sur l'axe des x
axis(1, at = x_values, labels = colnames(data), las = 2)
x_values <- as.numeric(colnames(data))
axis(1, at = x_values, labels = colnames(data), las = 2)
x_values <- as.numeric(colnames(data))
# Tracer les courbes
matplot(x_values, t(data), type = "l", lty = 1, col = rainbow(1000), xaxt = "n", ylab ="Célérité", xlab="Profondeur")
title("Courbes des profils")
axis(1, at = x_values, labels = colnames(data), las = 2)
library(fda)
library(stats)
library(mclust)
library(plotly)
library(cluster)
library(tidyverse)
library(factoextra)
source("./utils/lissage.R")
source("./utils/preprocess.R")
source("./utils/clustering.R")
source("./utils/derive_fonctionnelle.R")
source("./utils/distances_fonctionnelles.R")
# ------------------------- Chargement des donnees  ----------------------------
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data, extract_n_data = 1000)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
## ---------------------------- Visualisation ----------------------------------
x_values <- as.numeric(colnames(data))
# Tracer les courbes
matplot(x_values, t(data), type = "l", lty = 1, col = rainbow(1000), xaxt = "n", ylab ="Célérité", xlab="Profondeur")
title("Courbes des profils")
axis(1, at = x_values, labels = colnames(data), las = 2)
