fdobj_list_bloc <- lissage_spline_cubique_bloc(t(as.data.frame(trimmed_rows[-1])), val[1:length(trimmed_rows[-1])], D)
for (i in seq_along(fdobj_list_bloc)) {
fdobj_list[nrow(fdobj_list)+1] = fdobj_list_bloc[[i]]
}
}
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
for (length in unique_lengths) {
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
}
cat(trimmed_rows)
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
for (length in unique_lengths) {
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
cat(trimmed_rows)
}
print(trimmed_rows)
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
for (length in unique_lengths) {
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
}
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
length = 48
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
length = 48
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
fdobj_list <- list()
for (profil in trimmed_rows){
fdobj <- lissage_spline_cubique(profil,val, D)
}
profil
cat(profil)
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
length = 48
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
fdobj_list <- list()
for (profil in trimmed_rows){
cat(profil)
#fdobj <- lissage_spline_cubique(profil,val, D)
}
print(profil)
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
length = 48
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
fdobj_list <- list()
for (profil in trimmed_rows){
print(profil)
#fdobj <- lissage_spline_cubique(profil,val, D)
}
for (row in rows(trimmed_rows){
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
length = 48
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
fdobj_list <- list()
for (row in rows(trimmed_rows)){
print(profil)
#fdobj <- lissage_spline_cubique(profil,val, D)
}
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
length = 48
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
for (i in 1:nrow(trimmed_rows)) {
row <- trimmed_rows[i, ]  # Extraire la i-ème ligne
print(row)  # Afficher la ligne
# fdobj <- lissage_spline_cubique(row, val, D)  # Si vous avez besoin d'utiliser cette ligne, assurez-vous que les variables val et D sont définies
}
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
length = 48
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
for (i in 1:nrow(trimmed_rows)) {
row <- trimmed_rows[i, ]  # Extraire la i-ème ligne
fdobj <- lissage_spline_cubique(row, val, D)  # Si vous avez besoin d'utiliser cette ligne, assurez-vous que les variables val et D sont définies
}
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
length = 48
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
for (i in 1:nrow(trimmed_rows)) {
row <- trimmed_rows[i, ]
print(length(row))
#fdobj <- lissage_spline_cubique(row, val, D)  # Si vous avez besoin d'utiliser cette ligne, assurez-vous que les variables val et D sont définies
}
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
length = 48
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
for (i in 1:nrow(trimmed_rows)) {
row <- trimmed_rows[i, ]
print(length(row))
fdobj <- lissage_spline_cubique(row, val[1:48], D)  # Si vous avez besoin d'utiliser cette ligne, assurez-vous que les variables val et D sont définies
}
val
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
length = 48
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
for (i in 1:nrow(trimmed_rows)) {
row <- trimmed_rows[i, ]
print(length(row))
fdobj <- lissage_spline_cubique(row, val[1:48], D)  # Si vous avez besoin d'utiliser cette ligne, assurez-vous que les variables val et D sont définies
}
val
range(val)
val[1:48]
quantile(val[1:48], na.rm = TRUE)
range(val[1:48], na.rm = TRUE)
range(val[1:48])
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
length = 48
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
for (i in 1:nrow(trimmed_rows)) {
row <- trimmed_rows[i, ]
print(length(row))
fdobj <- lissage_spline_cubique(row, val[1:48], D)  # Si vous avez besoin d'utiliser cette ligne, assurez-vous que les variables val et D sont définies
}
length(1,48)
length(seq(1,48,1))
val
trimmed_rows[1,]
length(trimmed_rows[1,])
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
length = 48
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
for (i in 1:nrow(trimmed_rows)) {
row <- trimmed_rows[i, ]
print(length(row))
fdobj <- lissage_spline_cubique(row[-1], val[1:47], D)  # Si vous avez besoin d'utiliser cette ligne, assurez-vous que les variables val et D sont définies
}
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 50
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
length = 48
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
for (i in 1:nrow(trimmed_rows)) {
row <- trimmed_rows[i, ]
fdobj <- lissage_spline_cubique(row[-1], val[1:47], D)  # Si vous avez besoin d'utiliser cette ligne, assurez-vous que les variables val et D sont définies
}
(trimmed_rows[1,])[-1]
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 50
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
length = 48
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
for (i in 1:nrow(trimmed_rows)) {
row <- trimmed_rows[i, ]
fdobj <- lissage_spline_cubique(row[-1], val[1:47], D)  # Si vous avez besoin d'utiliser cette ligne, assurez-vous que les variables val et D sont définies
}
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 50
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
length = 48
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
print(trimmed_rows)
for (i in 1:nrow(trimmed_rows)) {
row <- trimmed_rows[i, ]
fdobj <- lissage_spline_cubique(row[-1], val[1:47], D)  # Si vous avez besoin d'utiliser cette ligne, assurez-vous que les variables val et D sont définies
}
# Lissage des profils de célérité
source("./Code_R/fonctionsR/lissage.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep = ";")
rownames(data) <- data$pixel
data <- data[1:100, ]
row_lengths <- apply(data, 1, function(row) sum(!is.na(row)))
unique_lengths <- sort(unique(row_lengths))
D <- 20
rows_by_length <- list()
fdobj_list <- list()
val <- as.integer(sub("^X", "", colnames(data[-1])))
val <- val[-length(val)]
for (length in unique_lengths) {
rows <- data[row_lengths == length, ]
# Supprimer les valeurs NA en coupant les lignes à la bonne longueur
trimmed_rows <- t(apply(rows, 1, function(row) {
head(row[!is.na(row)], length) # Correction ici : trim NA correctement
}))
# Stocker les lignes nettoyées dans la liste
rows_by_length[[as.character(length)]] <- trimmed_rows
cat("Rows with length", length, ":\n")
##############################################################################
#                               Lissage par bloc
##############################################################################
# Application de la fonction de lissage par bloc
fdobj_list_bloc <- lissage_spline_cubique_bloc(t(as.data.frame(trimmed_rows[-1])), val[1:length(trimmed_rows[-1])], D)
for (i in seq_along(fdobj_list_bloc)) {
fdobj_list[nrow(fdobj_list)+1] = fdobj_list_bloc[[i]]
}
}
t(as.data.frame(trimmed_rows[-1])
)
val
val[1:length(trimmed_rows[-1])]
length(val[1:length(trimmed_rows[-1])])
range(val[1:length(trimmed_rows[-1])])
# Lissage des profils de célérité
source("./Code_R/utils/lissage.R")
# Lissage des profils de célérité
source("./Code_R/utils/lissage.R")
setwd("C:/Users/hugo.nguyen/Documents/M2 TRIED/Projet_Long/PL-FunctionalDataAnalysis")
# Lissage des profils de célérité
source("./Code_R/utils/lissage.R")
