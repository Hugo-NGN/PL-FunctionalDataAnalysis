#charge les donnees
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
#definition des variables utiles pour le lissage
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
#Plot des courbes lissees
plot(fd_obj[[1]], col = 1, lty = 1, main = "Courbes fonctionnelles (bloc 47)", ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = i, lty = 1)
}
library(tidyverse)
library(fda)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles2.R")
#charge les donnees
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
#definition des variables utiles pour le lissage
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
#Plot des courbes lissees
plot(fd_obj[[1]], col = 1, lty = 1, main = "Courbes fonctionnelles (bloc 47)", ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = i, lty = 1)
}
D0_matrix <- calculate_D0_matrix(fd_obj)
source("./utils/distances_fonctionnelles2.R")
D0_matrix <- compute_D0_matrix(fd_obj)
library(tidyverse)
library(fda)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles2.R")
#charge les donnees
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
#definition des variables utiles pour le lissage
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
#Plot des courbes lissees
plot(fd_obj[[1]], col = 1, lty = 1, main = "Courbes fonctionnelles (bloc 47)", ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = i, lty = 1)
}
D0_matrix <- compute_D0_matrix(fd_obj)
source("./utils/distances_fonctionnelles2.R")
fine_grid <- seq(min(as.numeric(colnames(data))), max(as.numeric(colnames(data))), length.out = 10000)
D0_matrix <- calculate_D0_matrix(fd_obj, fine_grid)
print(D0_matrix)
View(D0_matrix)
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D1_matrix <- calculate_D1_matrix(fd_obj, fine_grid)
source("./utils/distances_fonctionnelles2.R")
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D1_matrix <- calculate_D1_matrix(fd_obj, fine_grid)
source("./utils/distances_fonctionnelles2.R")
View(D1_matrix)
View(D0_matrix)
source("./utils/distances_fonctionnelles2.R")
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D1_matrix <- calculate_D1_matrix(fd_obj, fine_grid)
source("./utils/distances_fonctionnelles2.R")
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D1_matrix <- calculate_D1_matrix(fd_obj, fine_grid)
source("./utils/distances_fonctionnelles2.R")
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D1_matrix <- calculate_D1_matrix(fd_obj, fine_grid)
View(D1_matrix)
source("./utils/distances_fonctionnelles2.R")
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D1_matrix <- calculate_D1_matrix(fd_obj, fine_grid)
library(tidyverse)
library(fda)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles2.R")
# ------------------------- Chargement les donnees  ----------------------------
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
# -------------------------------- Lissage  ------------------------------------
#definition des variables utiles pour le lissage
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
## ------------------------ Affichage courbes lisses ---------------------------
plot(fd_obj[[1]], col = 1, lty = 1, main = "Courbes fonctionnelles (bloc 47)", ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = i, lty = 1)
}
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D1_matrix <- calculate_D1_matrix(fd_obj, fine_grid)
library(tidyverse)
library(fda)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles2.R")
# ------------------------- Chargement les donnees  ----------------------------
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
# -------------------------------- Lissage  ------------------------------------
#definition des variables utiles pour le lissage
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D1_matrix <- calculate_D1_matrix(fd_obj, fine_grid)
dim(fd_obj)
dim(fd_obj)[1]
length(fd_obj)
fd_obj[1]
range(length(fd_obj))
range(0, length(fd_obj))
range(0, length(fd_obj), 1)
range(0, length(fd_obj), 2)
range(0, length(fd_obj))
fd_deriv <- list()
for(i in range(0, lenght(fd_obj))){
fd_deriv[i] <- deriv.fd(fd_obj[i])
}
fd_deriv <- list()
for(i in range(0, length(fd_obj))){
fd_deriv[i] <- deriv.fd(fd_obj[i])
}
view_fd_obj
View(fd_obj)
fd_deriv <- list()
for(i in range(0, length(fd_obj))){
fd_deriv[i] <- deriv.fd(fd_obj[[i]])
}
fd_deriv <- list()
for(i in range(0, length(fd_obj))){
fd_deriv[i] <- deriv.fd(fd_obj[i])
}
fd_deriv <- deriv.fd(fd_obj)
fd_deriv <- list()
for(i in range(0, length(fd_obj))){
fd_deriv[i] <- lapply(fd_obj[i], deriv.fd)
}
fd_deriv <- list()
for(i in range(0, length(fd_obj))){
fd_deriv[i] <- lapply(fd_obj[i], deriv.fd)
}
fd_exemple = fd_obj[1]
deriv.fd(fd_exemple)
deriv.fd(fd_exemple$fd)
fd_exemple
fd_exemple$fd
fd_exemple = fd_obj[[1]
]
View(fd_exemple)
deriv.fd(fd_exemple$fd)
fd_exemple$fd
deriv.fd(fd_exemple$fd)
lapply(fd_exemple$fd, deriv.fd)
lapply(fd_exemple, deriv.fd)
lapply(fd_obj, deriv.fd)
library(tidyverse)
library(fda)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles2.R")
library(tidyverse)
library(fda)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles.R")
# ------------------------- Chargement les donnees  ----------------------------
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
# -------------------------------- Lissage  ------------------------------------
#definition des variables utiles pour le lissage
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
## ------------------------ Affichage courbes lisses ---------------------------
plot(fd_obj[[1]], col = 1, lty = 1, main = "Courbes fonctionnelles (bloc 47)", ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = i, lty = 1)
}
# ----------------------------  Calcul matrice D0  -----------------------------
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D0_matrix <- calculate_D0_matrix(fd_obj, fine_grid)
View(D0_matrix)
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D1_matrix <- calculate_D1_matrix(fd_obj, fine_grid)
library(tidyverse)
library(fda)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles.R")
# ------------------------- Chargement les donnees  ----------------------------
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
# -------------------------------- Lissage  ------------------------------------
#definition des variables utiles pour le lissage
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D1_matrix <- calculate_D1_matrix(fd_obj, fine_grid)
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D1_matrix <- calculate_D1_matrix(fd_obj, fine_grid)
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D1_matrix <- calculate_D1_matrix(fd_obj, fine_grid)
fd_obj
for (i in seq_along(fd_obj)) {
print(paste("Vérification de fd_obj[[", i, "]]"))
print(fd_obj[[i]])
test <- try(deriv.fd(fd_obj[[i]]), silent = TRUE)
if (inherits(test, "try-error")) {
print(paste("Erreur dans la dérivation de fd_obj[[", i, "]]"))
}
}
diff_fd_basis <- function(fd_obj) {
# Récupérer la base associée
basis <- fd_obj$basis
# Obtenir la matrice des dérivées des fonctions de base
basis_deriv <- eval.basis(basis$rangeval, basis, Lfdobj = 1)
# Calcul des nouveaux coefficients (produit matrice des dérivées × coefficients initiaux)
fd_deriv_coef <- t(basis_deriv) %*% fd_obj$coefs
# Créer le nouvel objet fd pour la dérivée
return(fd(fd_deriv_coef, basis))
}
# Appliquer la dérivation à chaque élément de la liste fd_obj
fd_obj_deriv <- lapply(fd_obj, diff_fd_basis)
diff_fd_basis <- function(fd_obj) {
# Récupérer la base associée
basis <- fd_obj$basis
# Calcul des nouveaux coefficients via la fonction dérivée de la base
fd_deriv <- deriv.fd(fd_obj, Lfdobj = 1)
return(fd_deriv)
}
# Appliquer la dérivation à chaque élément de la liste fd_obj
fd_obj_deriv <- lapply(fd_obj, diff_fd_basis)
diff_fd_manual <- function(fd_obj) {
basis <- fd_obj$basis
# Vérifier si c'est une base de B-splines
if (basis$type != "bspline") {
stop("Cette méthode ne fonctionne que pour les bases de B-splines")
}
# Matrice des dérivées des B-splines
basis_deriv <- bsplineS(seq(basis$rangeval[1], basis$rangeval[2], length.out = basis$nbasis),
basis, nderiv = 1)
# Mise à jour des coefficients
fd_deriv_coef <- basis_deriv %*% fd_obj$coefs
# Création du nouvel objet fd
fd_deriv <- fd(fd_deriv_coef, basis)
return(fd_deriv)
}
# Appliquer la dérivation à chaque élément de la liste fd_obj
fd_obj_deriv <- lapply(fd_obj, diff_fd_manual)
plot(fd_obj[[1]])
plot(fd_obj[[10]])
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D1_matrix <- calculate_D1_matrix(fd_obj, fine_grid)
derive_fd <- function(fd_obj) {
basis_fd <- fd_obj$basis  # Récupérer la base fonctionnelle
coef_fd <- fd_obj$coefs   # Récupérer les coefficients
# Calculer la dérivée de la base de B-splines
basis_fd_deriv <- deriv(basis_fd)
# Construire un nouvel objet fonctionnel avec la base dérivée
fd_obj_deriv <- fd(coef_fd, basis_fd_deriv)
return(fd_obj_deriv)
}
# Appliquer la fonction à chaque objet fonctionnel de la liste
fd_obj_deriv <- lapply(fd_obj, derive_fd)
library(fda)
# Fonction pour dériver un objet fonctionnel
derive_fd <- function(fd_obj) {
# Récupérer la base et les coefficients
basis_fd <- fd_obj$basis
coef_fd <- fd_obj$coefs
# Calculer la matrice des dérivées de la base de B-splines
basis_fd_deriv <- create.bspline.basis(rangeval = basis_fd$rangeval,
nbasis = basis_fd$nbasis,
norder = basis_fd$nbasis - 1) # Réduction de l'ordre pour la dérivée
# Calculer les nouveaux coefficients en multipliant par la matrice des dérivées
coef_fd_deriv <- eval.basis(basis_fd$rangeval, basis_fd_deriv, Lfdobj = 1) %*% coef_fd
# Construire un nouvel objet fonctionnel
fd_obj_deriv <- fd(coef_fd_deriv, basis_fd_deriv)
return(fd_obj_deriv)
}
# Appliquer la fonction sur chaque objet fonctionnel de la liste
fd_obj_deriv <- lapply(fd_obj, derive_fd)
# Fonction pour obtenir la dérivée d'un objet fonctionnel
derive_fd <- function(fd_obj) {
# Définition de l'objet différentiel Lfdobj = 1 (première dérivée)
Lfdobj <- int2Lfd(1)
# Calcul de la dérivée directement sur l'objet fonctionnel
fd_obj_deriv <- deriv.fd(fd_obj, Lfdobj)
return(fd_obj_deriv)
}
# Appliquer la fonction à chaque objet fonctionnel de la liste
fd_obj_deriv <- lapply(fd_obj, derive_fd)
View(fd_obj[[1]])
View(D0_matrix)
library(stats)
library(factoextra)
hc <- hclust(as.dist(D0_matrix), method = "complete")
# Visualiser le dendrogramme avec les groupes
fviz_dendrogram(hc, k = 2,
cex = 0.6,
hang = -1,
rect = TRUE,
main = "Dendrogramme de la CAH")
library(factoextra)
fviz_dendrogram(hc, k = 2,
cex = 0.6,
hang = -1,
rect = TRUE,
main = "Dendrogramme de la CAH")
library(FactoMineR)
fviz_dendrogram(hc, k = 2,
cex = 0.6,
hang = -1,
rect = TRUE,
main = "Dendrogramme de la CAH")
library(stats)
install.packages("factoextra")
install.packages("factoextra")
groups <- cutree(hc, k = 2)
# Visualiser le dendrogramme avec les groupes
fviz_dend(hc, k = 2,
cex = 0.6,
hang = -1,
rect = TRUE,
main = "Dendrogramme de la CAH")
print(groups)
View(groups)
groups
group_colors <- c("red", "blue")
# Tracer les courbes avec les couleurs des groupes
plot(fd_obj[[1]], col = group_colors[groups[1]], lty = 1,
main = "Courbes fonctionnelles par groupe",
ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = group_colors[groups[i]], lty = 1)
}
# Ajouter une légende
legend("topright", legend = paste("Groupe", 1:2), col = group_colors, lty = 1)
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D1_matrix <- calculate_D1_matrix(fd_obj, fine_grid)
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
library(fda)
library(stats)
library(factoextra)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles.R")
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
library(tidyverse)
library(fda)
library(stats)
library(factoextra)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles.R")
# ------------------------- Chargement les donnees  ----------------------------
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data, extract_n_data=100)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
library(tidyverse)
library(fda)
library(stats)
library(factoextra)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles.R")
# ------------------------- Chargement les donnees  ----------------------------
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data, extract_n_data=200)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
# -------------------------------- Lissage  ------------------------------------
#definition des variables utiles pour le lissage
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
## ------------------------ Affichage courbes lisses ---------------------------
plot(fd_obj[[1]], col = 1, lty = 1, main = "Courbes fonctionnelles (bloc 47)",
ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = i, lty = 1)
}
fine_grid <- seq(min(as.numeric(colnames(data))),
max(as.numeric(colnames(data))),
length.out = 10000)
D0_matrix <- calculate_D0_matrix(fd_obj, fine_grid)
hc <- hclust(as.dist(D0_matrix), method = "complete")
groups <- cutree(hc, k = 3)
# Visualiser le dendrogramme avec les groupes
fviz_dend(hc, k = 3,
cex = 0.6,
hang = -1,
rect = TRUE,
main = "Dendrogramme de la CAH")
print(groups)
group_colors <- c("red", "blue", 'green')
plot(fd_obj[[1]], col = group_colors[groups[1]], lty = 1,
main = "Courbes fonctionnelles par groupe",
ylab = "Célérité", xlab = "Profondeurs")
for (i in 2:length(fd_obj)) {
lines(fd_obj[[i]], col = group_colors[groups[i]], lty = 1)
}
legend("topright", legend = paste("Groupe", 1:3), col = group_colors, lty = 1)
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
# -------------------------------- Lissage  ------------------------------------
#definition des variables utiles pour le lissage
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
library(tidyverse)
library(fda)
library(stats)
library(factoextra)
source("./utils/lissage.R")
source("./utils/prepocess.R")
source("./utils/distances_fonctionnelles.R")
# ------------------------- Chargement des donnees  ----------------------------
data <- read.csv("./data/var_SV_2018-01-01_00H_nan-forced_depth.csv", sep=";")
data <-preprocess(data)
sub <- gsub("^X", "", colnames(data))
colnames(data) <-  sub
# -------------------------------- Lissage  ------------------------------------
#definition des variables utiles pour le lissage
l_grille = 10^seq(-3, 5, length.out = 1000)
D <- 30
z <- as.numeric(colnames(data))
#lissage B-spline
fd_obj <- spline_lissage_bloc_quantile(data, l_grille, D, z)
saveRDS(fd_obj, file = "./data/fdata.rds")
